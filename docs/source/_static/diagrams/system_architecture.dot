digraph G {
    rankdir=TB;
    compound=true;
    node [shape=box, style="rounded,filled", fontname="Arial", fontsize=10, margin=0.2];
    edge [fontname="Arial", fontsize=8, penwidth=1.2];
    
    subgraph cluster_input {
        label="Input Processing";
        style=filled;
        color=lightblue;
        
        multimodal [label="Multimodal Input\n(Audio/Video/Text)", shape=ellipse];
        bert [label="BERT Contextualizer\n(Emotional Enhancement)"];
        
        multimodal -> bert;
    }
    
    subgraph cluster_memory {
        label="Memory System";
        style=filled;
        color=lightgreen;
        
        transformer [label="Transformer²\nProcessor", shape=octagon];
        episodic [label="Episodic\nMemory", shape=ellipse];
        semantic [label="Semantic\nMemory", shape=ellipse];
        procedural [label="Procedural\nMemory", shape=ellipse];
        
        transformer -> episodic [dir=both, label="Write/Read"];
        transformer -> semantic [dir=both, label="Write/Read"];
        semantic -> procedural;
        episodic -> procedural;
    }
    
    subgraph cluster_therapeutic {
        label="Therapeutic Processing";
        style=filled;
        color=lightpink;
        
        ees [label="Emotional Embedding Space\n(EES)", shape=octagon];
        tsm [label="Therapeutic State Manifold\n(TSM)", shape=octagon];
        mapping [label="State Mapping Function\nf: ℋ(EES) → TSM"];
        
        ees -> mapping;
        mapping -> tsm;
    }
    
    subgraph cluster_response {
        label="Response Generation";
        style=filled;
        color=lightyellow;
        
        ppo [label="RL Optimization\n(PPO)", shape=ellipse];
        gpt [label="Response Generation\n(Contextual GPT)", shape=ellipse];
        testing [label="Adversarial Testing\n(GPT-4)", shape=ellipse];
        
        tsm -> ppo [ltail=cluster_therapeutic];
        ppo -> gpt;
        gpt -> testing;
    }
    
    bert -> transformer;
    transformer -> ees [label="Memory\nContext"];
    testing -> multimodal [label="Client\nFeedback", constraint=false, style=dashed];
    testing -> transformer [label="Memory\nUpdate", constraint=false, style=dashed];
    
    // Invisible edges for layout
    {rank=same; bert; transformer}
    {rank=same; ees; tsm}
    {rank=same; ppo; gpt; testing}
}
